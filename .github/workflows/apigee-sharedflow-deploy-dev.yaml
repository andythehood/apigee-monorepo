# This is a workflow to deploy all changed ApigeeX proxies from this monorepo

name: Deploy ApigeeX Shared Flows

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths:
      - 'sharedflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'sharedflows/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  detect-changes:
    name: Detect Changed Shared Flows
    # This job detects which shared flows have changed since the last commit
    runs-on: ubuntu-latest
    environment: dev

    outputs:
      changed_sharedflows: ${{ steps.set-sharedflows.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed
        run: |
          echo "Detecting changed files..."
          echo "Event name: ${{ github.event_name }}"

          # Compare with the base commit (for PRs) or previous SHA (for push)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE=${{ github.event.pull_request.base.sha }}
          else
            BASE=${{ github.event.before }}
          fi

          CHANGED=$(git diff --name-only "$BASE" ${{ github.sha }} | xargs)

          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract changed Shared Flow folders
        id: set-sharedflows
        run: |
          FILES="${{ steps.changed.outputs.changed_files }}"

          SHAREDFLOWS=$(echo "$FILES" | tr ' ' '\n' | grep '^sharedflows/' | cut -d/ -f2 | sort -u | jq -R . | jq -s .)
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$SHAREDFLOWS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


  deploy-sharedflows:
    name: Deploy Changed Shared Flows
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_sharedflows != '[]'
    runs-on: ubuntu-latest
    environment: dev
    env:
      APIGEE_X_ORG: ${{ vars.APIGEE_X_ORG }}
      APIGEE_X_ENVS: "public private"
    strategy:
      matrix:
        sharedflow: ${{ fromJson(needs.detect-changes.outputs.changed_sharedflows) }}
    steps:

      - name: Select branch for environment
        id: select_branch
        run: |
          echo "branch=main" >> $GITHUB_OUTPUT
          # if [ "${{ github.event.inputs.environment }}" = "dev" ]; then
          #   echo "branch=main" >> $GITHUB_OUTPUT
          # # elif [ "${{ github.event.inputs.environment }}" = "sit" ]; then
          # #   echo "branch=feature/sit" >> $GITHUB_OUTPUT
          # elif [ "${{ github.event.inputs.environment }}" = "prod" ]; then
          #   echo "branch=feature/prod" >> $GITHUB_OUTPUT
          # fi

      - name: Checkout repo
        uses: actions/checkout@v4

      # The committed changes may have deleted the sharedflow folder, so we need to check whether it still exists
      # If it does, then we proceed with the deployment
      # If it does not, we undeploy the sharedflow from all environments
      - name: Check if sharedflow folder exists
        id: check_folder
        run: |
          if [ -d "sharedflows/${{ matrix.sharedflow }}/sharedflowbundle" ]; then
            echo "Sharedflow folder exists"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "Folder does not exist"
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up gcloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.APIGEE_SA_KEY }}

      - name: Install Apigee CLI
        run: |
          curl -sLO https://github.com/apigee/apigeecli/releases/download/v2.15.0/apigeecli_v2.15.0_Linux_x86_64.zip
          unzip apigeecli_v2.15.0_Linux_x86_64.zip
          sudo mv apigeecli_v2.15.0_Linux_x86_64/apigeecli /usr/local/bin/

      - name: Install apigeelint
        if: steps.check_folder.outputs.exists == 'true'
        run: |
          npm install -g apigeelint

      - name: Run apigeelint
        if: steps.check_folder.outputs.exists == 'true'
        run: |
          # set maxWarnings to -1 to ignore warnings, otherwise set to a number to fail build if the number of warnings is exceeded
          apigeelint -s ./sharedflows/${{ matrix.sharedflow }}/sharedflowbundle -f stylish --maxWarnings 10

      - name: Create SharedFlow bundle
        if: steps.check_folder.outputs.exists == 'true'
        run: |
          mkdir bundle
          cd sharedflows/${{ matrix.sharedflow }}
          zip -r ../../bundle/${{ matrix.sharedflow }}.zip sharedflowbundle

      - name: Import ApigeeX Shared Flow
        if: steps.check_folder.outputs.exists == 'true'
        id: import
        run: |
          apigeecli sharedflows import --default-token -o "$APIGEE_X_ORG" --folder ./bundle
          REVISION=$(apigeecli sharedflows get --default-token -o "$APIGEE_X_ORG" --name ${{ matrix.sharedflow }} | jq -r '.latestRevisionId')
          echo "revision=$REVISION" >> "$GITHUB_OUTPUT"

      - name: Deploy ApigeeX Shared Flow
        if: steps.check_folder.outputs.exists == 'true'
        run: |
          echo "Deploying revision ${{ steps.import.outputs.revision }}"
          for APIGEE_X_ENV in $APIGEE_X_ENVS; do
            apigeecli sharedflows deploy --default-token -o "$APIGEE_X_ORG" -e "$APIGEE_X_ENV" --name "${{ matrix.sharedflow }}" --rev ${{ steps.import.outputs.revision }} --ovr
          done

      - name: Output Deployment Info
        if: steps.check_folder.outputs.exists == 'true'
        run: |
          echo "Deployed ${{ matrix.sharedflow }} to environments $APIGEE_X_ENVS in project $APIGEE_X_ORG from branch ${{ steps.select_branch.outputs.branch }}"

      # The committed changes have deleted the sharedflow, so we undeploy the sharedflow from all environments          
      - name: Undeploy Deleted Sharedflows
        if: steps.check_folder.outputs.exists == 'false'
        run: |
          set +e  # disable immediate exit on error
          echo "Sharedflow ${{ matrix.sharedflow }} does not exist. Undeploying from all Environments."

          DEPLOYMENTS=$(apigeecli sharedflows listdeploy --default-token -o "$APIGEE_X_ORG" --name "${{ matrix.sharedflow }}")
          STATUS=$?

          if [ "$STATUS" -eq 0 ]; then
            echo "✅ Success"

            if echo "$DEPLOYMENTS" | jq -e '.deployments and (.deployments | length > 0)' >/dev/null; then
              echo "$DEPLOYMENTS" | jq -c '.deployments[]' | while read -r deployment; do
                environment=$(echo "$deployment" | jq -r '.environment')
                proxy=$(echo "$deployment" | jq -r '.apiProxy')
                revision=$(echo "$deployment" | jq -r '.revision')

                OUTPUT=$(apigeecli sharedflows undeploy --default-token -o "$APIGEE_X_ORG" -e "$environment" --name "$proxy"  --rev "$revision")
                STATUS=$?

                if [ "$STATUS" -eq 0 ]; then
                  echo "✅ Success"
                else
                  echo "❌ Unexpected error"
                  exit $STATUS
                fi
              done
            fi

          elif echo "$DEPLOYMENTS" | grep -q "not found"; then
            echo "ℹ️ Sharedflow is not deployed, so treating as success"
          else
            echo "❌ Unexpected error"
            exit $STATUS
          fi


      - name: Remove Deleted Sharedflows
        if: steps.check_folder.outputs.exists == 'false'
        run: |
          echo "Sharedflow ${{ matrix.sharedflow }} does not exist. Deleting from Organization."
          # TODO: Add logic to delete the sharedflow from the organization
