# This workflow deploys ApigeeX Target Servers).

name: Deploy ApigeeX Target Servers

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths:
      - 'targetservers/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'targetservers/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  detect-changes:
    name: Detect Changes to Target Servers
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      changed_targetservers: ${{ steps.set-targetservers.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changes
        id: changed
        run: |
          echo "Detecting changed files..."
          echo "Event name: ${{ github.event_name }}"

          # Compare with the base commit (for PRs) or previous SHA (for push)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE=${{ github.event.pull_request.base.sha }}
          else
            BASE=${{ github.event.before }}
          fi

          CHANGED=$(git diff --name-only "$BASE" ${{ github.sha }} | xargs)

          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract changed Target Server folders
        id: set-targetservers
        run: |
          FILES="${{ steps.changed.outputs.changed_files }}"

          TARGETSERVERS=$(echo "$FILES" | tr ' ' '\n' | grep '^targetservers/' | cut -d/ -f2 | sort -u | jq -R . | jq -s .)
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$TARGETSERVERS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  deploy-targetservers:
    name: Deploy Changed Target Servers
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_targetservers != '[]'

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: dev
    env:
      APIGEE_X_ORG: ${{ vars.APIGEE_X_ORG }}
      APIGEE_X_ENVS: "public eval"
      DEPLOY_ENV: dev

    strategy:
      matrix:
        targetserver: ${{ fromJson(needs.detect-changes.outputs.changed_targetservers) }}
    steps:

      - name: Checkout repo
        uses: actions/checkout@v4

      # The committed changes may have deleted the targetserver folder, so we need to check whether it still exists
      # If it does, then we proceed with the deployment
      # If it does not, we undeploy the targetserver from all environments
      - name: Check if targetserver folder exists
        id: check_folder
        run: |
          if [ -d "targetservers/${{ matrix.targetserver }}" ]; then
            echo "Targetserver folder exists"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "Folder does not exist"
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
          
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.APIGEE_SA_KEY }}'

      - name: Install Apigee CLI
        run: |
          curl -sLO https://github.com/apigee/apigeecli/releases/download/v.0/apigeecli_v2.15.0_Linux_x86_64.zip
          unzip apigeecli_v2.15.0_Linux_x86_64.zip
          sudo mv apigeecli_v2.15.0_Linux_x86_64/apigeecli /usr/local/bin/

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Output Deployment Info
        if: steps.check_folder.outputs.exists == 'true'
        run: |
          echo "Preparing to deploy Target Server ${{ matrix.targetserver }} to $APIGEE_X_ORG from branch ${{ github.ref_name }}"

      - name: Render template with environment variable substitution from .env 
        if: steps.check_folder.outputs.exists == 'true'
        uses: ./.github/actions/render-envvars
        with:
          template: "targetservers/${{ matrix.targetserver }}/template.yaml"
          envfile: "targetservers/${{ matrix.targetserver }}/.env.$DEPLOY_ENV"
          output: "targetservers/${{ matrix.targetserver }}/output.yaml"

      - name: Convert output to an Array for apigeecli import command
        if: steps.check_folder.outputs.exists == 'true'
        run: |
          # Convert YAML to JSON using yq
          yq -o=json '[.targetserver]' targetservers/${{ matrix.targetserver }}/output.yaml > targetservers/${{ matrix.targetserver }}/targetservers.json
          echo "✅ JSON written to targetservers/${{ matrix.targetserver }}/targetservers.json"

      - name: Print result
        if: steps.check_folder.outputs.exists == 'true'
        run: |
          cat targetservers/${{ matrix.targetserver }}/targetservers.json
 
      - name: Deploy ApigeeX Target Server
        if: steps.check_folder.outputs.exists == 'true'
        run: |
          for APIGEE_X_ENV in $APIGEE_X_ENVS; do 
            echo "Deploying to environment: $APIGEE_X_ENV"
            apigeecli targetservers import --default-token -o "$APIGEE_X_ORG" -e "$APIGEE_X_ENV" --file targetservers/${{ matrix.targetserver }}/targetservers.json
          done


      # The committed changes have deleted the sharedflow, so we undeploy the sharedflow from all environments          
      - name: Remove Deleted TargetServers
        if: steps.check_folder.outputs.exists == 'false'
        run: |
          set +e  # disable immediate exit on error
          echo "TargetServer ${{ matrix.targetserver }} does not exist. Undeploying from all Environments."
          ENVS=$(apigeecli environments list --default-token -o "$APIGEE_X_ORG"  | jq -r '. | join(" ")')
          for APIGEE_X_ENV in $ENVS; do
            OUTPUT=$(apigeecli targetservers delete --default-token -o "$APIGEE_X_ORG" -e "$APIGEE_X_ENV" --name "${{ matrix.targetserver }}")
            STATUS=$?

            if [ "$STATUS" -eq 0 ]; then
              echo "✅ Success"
            elif echo "$OUTPUT" | grep -q "is referenced by deployment"; then
              echo "ℹ️ TargetServer is referenced by a proxy deployed to this environment, so ignoring delete"
            elif echo "$OUTPUT" | grep -q "not found"; then
              echo "ℹ️ TargetServer is not deployed to this environment, so ignoring delete"
            else
              echo "❌ Unexpected error"
              exit $STATUS
            fi
          done


